# esse arquivo de especificação do k8s é uma base comum
# a todos os deployments relacionados ao serviço sales
# O kustomize irá manter o que não for alterado por algum
# arquivo de customização que for declarado.
# Assim podemos manter uma base comum a todos os ambientes
# e apenas diferenciar o que for específico para cada ambiente
apiVersion: v1
kind: Namespace
metadata:
  name: sales-system

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sales
  namespace: sales-system

spec:
  selector:
    # label que nos permite buscar pelo deployment por um nome
    matchLabels:
      app: sales

  template:
    metadata:
      labels:
        app: sales

    spec:
      terminationGracePeriodSeconds: 60

      # container para executar o binário de admin que faz as migrations
      initContainers:
      - name: init-migrate
        image: service-image
        command: ['./admin']


      containers:
      - name: sales-api
        # a imagem é passada durante a customização (kustomize)
        image: service-image # placeholder

        # determina as portas do container que serão expostas
        # serão mapeadas à portas do cluster que serão abertas em um k8s service
        # assim o cluster pode escutar em qualquer porta que quiser e redirecionar
        # para a porta que definimos no container
        ports:
        - name: sales-api
          containerPort: 3000
        - name: sales-api-debug
          containerPort: 4000


        readinessProbe: # readiness probes indicam que o serviço está pronto para aceitar tráfego
          httpGet:
            path: /debug/readiness
            port: 4000
          initialDelaySeconds: 2
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 2

        livenessProbe: # liveness probes indicam se o serviço está executando ou não
          httpGet:
            path: /debug/liveness
            port: 4000
          initialDelaySeconds: 2
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 2

        # GOMAXPROCS vai ser igual ao valor definido no limits para esse deploy
        env:
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              # se o valor não for exato, ele arredonda pra cima
              # 1500m cpu -> 1.5 -> GOMAXPROCS = 2
              resource: limits.cpu

        # variavéis que são usadas nos endpoints de health check
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName 
---
# Services permitem expor serviços, dns, portas, clusterIP...
# Configurações específicas devem ser adicionadas como patches kustomize
apiVersion: v1
kind: Service
metadata:
  name: sales-api
  namespace: sales-system
